name: Auto-Commenter

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  auto-commenter:
    runs-on: ubuntu-latest
    steps:
      - name: "git clone"
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: "github-script"
        uses: actions/github-script@v6
        env:
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        with:
          github-token: ${{ secrets.COMMENTING_GITHUB_TOKEN }}
          script: |
            if (context.eventName === 'pull_request') {
              let text = '';
              let commit_sha = '';
              if (context.payload.action === 'opened') {
                commit_sha = context.payload.pull_request.head.sha;
                text = `Thank you for submitting a PR starting from \`${commit_sha}\`.`;
              } else if (context.payload.action === 'synchronize') {
                commit_sha = context.payload.after;
                text = `Thank you for submitting commit \`${commit_sha}\`.`;
              }

              if (text !== '') {
                const { data: files } = await github.rest.pulls.listFiles({
                  pull_number: context.payload.number,
                  owner: process.env.GITHUB_REPOSITORY_OWNER,
                  repo: context.payload.pull_request.base.repo.name
                });

                filenames = [];
                for (const files_entry of files) {
                  filenames.push(files_entry.filename);
                }
                for (const filename of filenames) {
                  try {
                    await github.rest.pulls.createReviewComment({
                      pull_number: context.payload.number,
                      owner: process.env.GITHUB_REPOSITORY_OWNER,
                      repo: context.payload.pull_request.base.repo.name,
                      commit_id: commit_sha,
                      path: filename,
                      line: 40,  // NOTE(dkorolev) - this is a random line, replace by your logic, of course.
                      body: 'You are doing great, keep it up!'
                    });
                  } catch(e) {
                    // NOTE(dkorolev) - The "pull_request_review_thread.line must be part of the diff" error is OK!
                    console.log(`EXCEPTION - ${e}.`);
                  }
                }
                await github.rest.issues.createComment({
                  issue_number: context.payload.number,
                  repo: context.payload.pull_request.base.repo.name,
                  owner: process.env.GITHUB_REPOSITORY_OWNER,
                  body: text
                });
              }
            }
